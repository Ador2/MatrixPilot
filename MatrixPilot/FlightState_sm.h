/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : FlightState.sm
 */

#ifndef _FLIGHTSTATE_SM_H
#define _FLIGHTSTATE_SM_H

#include <assert.h>
#define STATEMAP_DEBUG 1
#include <statemap.h>


struct FlightState;
struct FlightStateContext;

struct FlightStateState {
    void(*go_Acquiring)(struct FlightStateContext *const fsm);
    void(*go_Calibrate)(struct FlightStateContext *const fsm);
    void(*go_Manual)(struct FlightStateContext *const fsm);
    void(*go_Return)(struct FlightStateContext *const fsm);
    void(*go_Stabilised)(struct FlightStateContext *const fsm);
    void(*go_Waypoint)(struct FlightStateContext *const fsm);
    void(*Default)(struct FlightStateContext *const fsm);
    STATE_MEMBERS
};

extern const struct FlightStateState FlightStateMap_Manual;
extern const struct FlightStateState FlightStateMap_Stabilised;
extern const struct FlightStateState FlightStateMap_Waypoint;
extern const struct FlightStateState FlightStateMap_Return;
extern const struct FlightStateState StartupMap_Start;
extern const struct FlightStateState StartupMap_Calibrate;
extern const struct FlightStateState StartupMap_Acquiring;

struct FlightStateContext {
    struct FlightState *_owner;
    FSM_MEMBERS(FlightState)
};

#ifdef NO_FLIGHTSTATE_SM_MACRO
extern void FlightStateContext_Init(struct FlightStateContext *const fsm, struct FlightState *const owner);
extern void FlightStateContext_go_Acquiring(struct FlightStateContext *const fsm);
extern void FlightStateContext_go_Calibrate(struct FlightStateContext *const fsm);
extern void FlightStateContext_go_Manual(struct FlightStateContext *const fsm);
extern void FlightStateContext_go_Return(struct FlightStateContext *const fsm);
extern void FlightStateContext_go_Stabilised(struct FlightStateContext *const fsm);
extern void FlightStateContext_go_Waypoint(struct FlightStateContext *const fsm);
#else
#define FlightStateContext_Init(fsm, owner) \
    FSM_INIT((fsm), &FlightStateMap_Manual); \
    (fsm)->_owner = (owner)

#define FlightStateContext_go_Acquiring(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "go_Acquiring"); \
    getState(fsm)->go_Acquiring((fsm)); \
    setTransition((fsm), NULL)

#define FlightStateContext_go_Calibrate(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "go_Calibrate"); \
    getState(fsm)->go_Calibrate((fsm)); \
    setTransition((fsm), NULL)

#define FlightStateContext_go_Manual(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "go_Manual"); \
    getState(fsm)->go_Manual((fsm)); \
    setTransition((fsm), NULL)

#define FlightStateContext_go_Return(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "go_Return"); \
    getState(fsm)->go_Return((fsm)); \
    setTransition((fsm), NULL)

#define FlightStateContext_go_Stabilised(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "go_Stabilised"); \
    getState(fsm)->go_Stabilised((fsm)); \
    setTransition((fsm), NULL)

#define FlightStateContext_go_Waypoint(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "go_Waypoint"); \
    getState(fsm)->go_Waypoint((fsm)); \
    setTransition((fsm), NULL)
#endif

#endif

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
